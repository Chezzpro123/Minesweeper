<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Minesweeper</title>
  <script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.6.0/dist/confetti.browser.min.js"></script>
  <style>
    body {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
      margin: 0;
      background-color: #0a0e1a;
      color: #a3bffa;
      font-family: Arial, sans-serif;
    }
    #game-container {
      display: grid;
      gap: 2px;
      background-color: #1c2526;
      padding: 10px;
      border-radius: 10px;
      box-shadow: 0 0 15px rgba(0, 102, 204, 0.5);
    }
    .cell {
      width: 40px;
      height: 40px;
      background-color: #2e3440;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 18px;
      cursor: pointer;
      user-select: none;
      border: 2px solid #4c566a;
    }
    .cell.revealed {
      background-color: #d8dee9;
      color: #2e3440;
      border: 1px solid #81a1c1;
    }
    .cell.mine {
      background-color: #bf616a;
    }
    .cell.flag {
      background-color: #88c0d0;
    }
    .cell.wrong-flag {
      background-color: #ff4444;
    }
    .cell:hover:not(.revealed):not(.flag):not(.wrong-flag) {
      background-color: #3b4252;
    }
    #game-status {
      margin-top: 20px;
      font-size: 24px;
      font-weight: bold;
      color: #81a1c1;
    }
    #restart-btn {
      margin-top: 10px;
      padding: 10px 20px;
      font-size: 16px;
      background-color: #5e81ac;
      border: none;
      color: #eceff4;
      cursor: pointer;
      border-radius: 5px;
    }
    #restart-btn:hover {
      background-color: #81a1c1;
    }
    canvas {
      position: fixed;
      top: 0;
      left: 0;
      pointer-events: none;
      z-index: 9999;
    }
  </style>
</head>
<body>
  <h1>Minesweeper</h1>
  <div id="game-container"></div>
  <div id="game-status"></div>
  <button id="restart-btn">New Game</button>

  <script>
    const ROWS = 10;
    const COLS = 10;
    const MINES = 10;
    let board = [];
    let gameOver = false;
    let firstClick = true;

    function initBoard() {
      board = [];
      gameOver = false;
      firstClick = true;
      document.getElementById('game-status').textContent = 'Make your move, legend!';

      // Create empty board
      for (let i = 0; i < ROWS; i++) {
        board[i] = [];
        for (let j = 0; j < COLS; j++) {
          board[i][j] = {
            isMine: false,
            isRevealed: false,
            isFlagged: false,
            neighborMines: 0
          };
        }
      }

      renderBoard();
    }

    function placeMines(excludeRow, excludeCol) {
      let minesPlaced = 0;
      while (minesPlaced < MINES) {
        const row = Math.floor(Math.random() * ROWS);
        const col = Math.floor(Math.random() * COLS);
        if (!board[row][col].isMine && !(row === excludeRow && col === excludeCol)) {
          board[row][col].isMine = true;
          minesPlaced++;
        }
      }

      // Calculate neighbor mines
      for (let i = 0; i < ROWS; i++) {
        for (let j = 0; j < COLS; j++) {
          if (!board[i][j].isMine) {
            board[i][j].neighborMines = countNeighborMines(i, j);
          }
        }
      }
    }

    function countNeighborMines(row, col) {
      let count = 0;
      for (let i = -1; i <= 1; i++) {
        for (let j = -1; j <= 1; j++) {
          const newRow = row + i;
          const newCol = col + j;
          if (newRow >= 0 && newRow < ROWS && newCol >= 0 && newCol < COLS) {
            if (board[newRow][newCol].isMine) count++;
          }
        }
      }
      return count;
    }

    function revealCell(row, col) {
      if (gameOver || board[row][col].isRevealed || board[row][col].isFlagged) return;

      if (firstClick) {
        placeMines(row, col);
        firstClick = false;
      }

      board[row][col].isRevealed = true;

      if (board[row][col].isMine) {
        gameOver = true;
        document.getElementById('game-status').textContent = 'BOOM! You got smoked!';
        revealAllMines();
      } else if (board[row][col].neighborMines === 0) {
        // Reveal adjacent cells if no neighbor mines
        for (let i = -1; i <= 1; i++) {
          for (let j = -1; j <= 1; j++) {
            const newRow = row + i;
            const newCol = col + j;
            if (newRow >= 0 && newRow < ROWS && newCol >= 0 && newCol < COLS) {
              revealCell(newRow, newCol);
            }
          }
        }
      }

      renderBoard();
      checkWin();
    }

    function toggleFlag(row, col) {
      if (gameOver || board[row][col].isRevealed) return;
      board[row][col].isFlagged = !board[row][col].isFlagged;
      renderBoard();
    }

    function revealAllMines() {
      for (let i = 0; i < ROWS; i++) {
        for (let j = 0; j < COLS; j++) {
          if (board[i][j].isMine) {
            board[i][j].isRevealed = true;
          }
        }
      }
      renderBoard();
    }

    function checkWin() {
      let revealedCount = 0;
      for (let i = 0; i < ROWS; i++) {
        for (let j = 0; j < COLS; j++) {
          if (board[i][j].isRevealed && !board[i][j].isMine) {
            revealedCount++;
          }
        }
      }
      if (revealedCount === ROWS * COLS - MINES) {
        gameOver = true;
        document.getElementById('game-status').textContent = 'You Win!';
        triggerConfetti();
      }
    }

    function triggerConfetti() {
      confetti({
        particleCount: 100,
        spread: 70,
        origin: { y: 0.6 },
        colors: ['#81a1c1', '#88c0d0', '#5e81ac', '#d8dee9']
      });
    }

    function renderBoard() {
      const gameContainer = document.getElementById('game-container');
      gameContainer.innerHTML = '';
      gameContainer.style.gridTemplateColumns = `repeat(${COLS}, 40px)`;

      for (let i = 0; i < ROWS; i++) {
        for (let j = 0; j < COLS; j++) {
          const cell = document.createElement('div');
          cell.classList.add('cell');
          if (board[i][j].isRevealed) {
            cell.classList.add('revealed');
            if (board[i][j].isMine) {
              cell.classList.add('mine');
              cell.textContent = 'ðŸ’£';
            } else if (board[i][j].neighborMines > 0) {
              cell.textContent = board[i][j].neighborMines;
            }
          } else if (board[i][j].isFlagged) {
            if (gameOver && !board[i][j].isMine) {
              cell.classList.add('wrong-flag');
            } else {
              cell.classList.add('flag');
            }
            cell.textContent = 'ðŸš©';
          }

          cell.addEventListener('click', () => revealCell(i, j));
          cell.addEventListener('contextmenu', (e) => {
            e.preventDefault();
            toggleFlag(i, j);
          });
          gameContainer.appendChild(cell);
        }
      }
    }

    document.getElementById('restart-btn').addEventListener('click', initBoard);
    initBoard();
  </script>
</body>
</html>